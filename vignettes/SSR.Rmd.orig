---
title: "State Space Reconstruction (SSR)"
author: "Wenbo Lv"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{SSR}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "##",
  fig.path = "man/figures/ssr/"
)
```

## Spatial State Space Reconstruction (S-SSR)

Takens theory proves that for a dynamical system $\phi$, if its trajectory converges to an attractor manifold $M$—a bounded and invariant set of states—then there exists a smooth mapping between the system $\phi$ and its attractor $M$. Consequently, the time series observations of $\phi$ can be used to reconstruct the structure of $M$ through delay embedding.

According to the generalized embedding theorem, for a compact $d$-dimensional manifold $M$ and a set of observation functions $\langle h_1, h_2, \ldots, h_L \rangle$, the mapping $\psi_{\phi,h}(x) = \langle h_1(x), h_2(x), \ldots, h_L(x) \rangle$ is an embedding of $M$ when $L \geq 2d + 1$. Here, *embedding* refers to a one-to-one map that resolves all singularities of the original manifold. The observation functions $h_i$ can take the form of time-lagged values from a single time series, lags from multiple time series, or even completely distinct measurements. The former two are simply special cases of the third.

This embedding framework can be extended to *spatial cross-sectional data*, which lack temporal ordering but are observed over a spatial domain. In this context, the observation functions can be defined using the values of a variable at a focal spatial unit and its surrounding neighbors (known as *spatial lags* in spatial statistics). Specifically, for a spatial location $s$, the embedding can be written as:

$$
\psi(x, s) = \langle h_s(x), h_{s(1)}(x), \ldots, h_{s(L-1)}(x) \rangle,
$$

where $h_{s(i)}(x)$ denotes the observation function of the $i$-th order spatial lag unit relative to $s$. These spatial lags provide the necessary diversity of observations for effective manifold reconstruction. In practice, if a given spatial lag order involves multiple units, summary statistics such as the mean or directionally-weighted averages can be used as the observation function to maintain a one-to-one embedding.

## Usage examples

### An example of spatial lattice data

Load the `spEDM` package and its county-level population density data:

```{r load_lattice_data}
library(spEDM)

popd_nb = spdep::read.gal(system.file("case/popd_nb.gal",package = "spEDM"))
popd = readr::read_csv(system.file("case/popd.csv",package = "spEDM"))
popd_sf = sf::st_as_sf(popd, coords = c("x","y"), crs = 4326)
popd_sf
```

Embedding the variable `popd` from county-level population density:

```{r embed_lattice_data}
v = embedded(popd_sf,"popd",E = 9,tau = 0,trend.rm = FALSE)
v[1:5,c(2,5,6)]
```

```{r fig1,fig.width=4.25,fig.height=4.5,fig.dpi=100,fig.cap=knitr::asis_output("**Figure 1**. The reconstructed shadow manifolds for `popd`.")}
plot3D::scatter3D(v[,2], v[,5], v[,6], colvar = NULL, pch = 19,
                  col = "red", theta = 45, phi = 10, cex = 0.45,
                  bty = "f", clab = NA, tickmarks = FALSE)
```

### An example of spatial grid data

Load the `spEDM` package and its soil pollution data:

```{r load_grid_data}
library(spEDM)

cu = terra::rast(system.file("case/cu.tif", package="spEDM"))
cu
```

Embedding the variable `cu` from soil pollution data:

```{r embed_grid_data}
r = spEDM::embedded(cu,"cu",E = 9,tau = 0,trend.rm = FALSE)
r[1:5,c(1,5,9)]
```

```{r fig2,fig.width=4.25,fig.height=4.5,fig.dpi=100,fig.cap=knitr::asis_output("**Figure 2**. The reconstructed shadow manifolds for `cu`.")}
plot3D::scatter3D(r[,1], r[,5], r[,9], colvar = NULL, pch = 19,
                  col = "#e77854", theta = 45, phi = 10, cex = 0.45,
                  bty = "f", clab = NA, tickmarks = FALSE)
```

### Determining Optimal Embedding Dimension Using False Nearest Neighbours

The false nearest neighbours (FNN) method helps identify the appropriate embedding dimension for reconstructing the state space of a time series or spatial cross-sectional. A low embedding dimension that minimizes false neighbours is considered optimal.

Below are two examples applying the `fnn()` function. In both cases, `eps` is set to one-tenth of the standard deviation of the variable of interest, providing a relative threshold for identifying false neighbours.

```{r fnn_lattice_data}
fnn(popd_sf,"popd",
    eps = stats::sd(popd_sf$popd) / 10)
```

```{r fnn_grid_data}
fnn(cu,"cu",
    eps = stats::sd(terra::values(cu[["cu"]]),na.rm = TRUE) / 10)
```
